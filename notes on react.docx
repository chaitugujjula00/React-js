  React.createElement => object => HTMLElement(render)

 const heading = React.createElement("h1",{id:"heading"},"It is the heading");

  JSX in  React 
 JSX is not HTML, it is HTML - like syntax

 const jsxheading = <h1>It is heading using JSX</h1>

 React component
 class based component - OLD
  Functional component - NEW( It is a function of javascript)
 const HeadingComponent =() =>{
     return <h1>Heading Component</h1>
 }
 or
 const HeadingComponent2 =() => <h1>Component 2</h1>


 for adding a component from one file to other file
 => use export in inital file and import in using file.


 Two types of export 
 1) (Default import)
 export default component;
  import component
  first type don't have {} in import
 2) (Named import)
 export const component1;
  export const component2; 
    import {component1/component2}
    need to use {} for import in this type of export

Can we use default import and named import combined?
ans : Yes we can use both in a single folder.

State variable - it is a super powerful variable
# react hook - normal JS utility functions
 - useState() -  super powerful variables in React
 - useEffect()

 eg for state variable : const [listofRes,setlistofRes] = useState([]);
setlistofRes is function to update listofRes state variable


-- Episode 6
  Monolith Architecture: Where each server will have their independent server.

  # episode 7 rendering 

  Need to install react-router-dom
  import { createBrowserRouter, RouterProvider} from "react-router-dom";
  // these are components of routing pages
  const appRouter = createBrowserRouter([
    {
        path:'/',
        element:<AppLayout/>
    },
    {
        path:'/about',
        element:<About/>
    },
]);
const root =ReactDOM.createRoot(document.getElementById("root"));
root.render(<RouterProvider router={appRouter}/>); => appRouter is acting as a router with an array of different paths.


//chunking
//code splitting
//Dynamic Bundling
// Lazy loading : Only loads the showing content but the whole content.
//on demand loading
import like const name =lazy(()=>import(file location));
<suspence fallback={component}> component</suspence>



/* *{
    background-color: #fcefef;
}
.header{
    display: flex;
    justify-content: space-between;
    padding:10px;
    height:100px;
}
.logo{
    height:100px;
    width:auto;
}
.nav-items{
    width:50%;
}
.nav-items>ul{
    list-style-type: none;
    font-size:24px;
    display:flex;
    justify-content: space-evenly;
}
.foodCard{
    width:20%;
    padding:10px;
    margin: 10px;
}
.foodCard:hover{
    margin:9px;
    cursor:pointer;
    border:1px solid #da2222;
}
.foodCard img{
    width:100%;
    height:200px;
}
.filter{
    padding:20px;
    display: flex;
    justify-content: space-around;
}
.search-box{
    padding:10px;
}
.filter-btn,.search-btn{
    margin:0px 10px;
    padding:10px;
    border:none;
}
.filter-btn:hover,.search-btn:hover{
    cursor:pointer;
    padding:9px;
    border: 1px solid black;
    box-shadow: inset;
}
.restaurants_container{
    padding:0px 100px;
    display:flex;
    flex-wrap: wrap;
}
.shimmer{
    padding:50px 100px;
    display:flex;
    flex-wrap: wrap;
}
.shimmer-container{
    background-color:rgba(200, 200, 200, 0.795);
    width:20%;
    height:400px;
    padding:10px;
    margin: 10px;
} */


Create context using createContext and use it using useContext